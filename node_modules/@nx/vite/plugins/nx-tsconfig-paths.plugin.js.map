{"version":3,"sources":["../../../../packages/vite/plugins/nx-tsconfig-paths.plugin.ts"],"sourcesContent":["import { stripIndents, workspaceRoot } from '@nx/devkit';\nimport { existsSync } from 'node:fs';\nimport { relative, join, resolve } from 'node:path';\nimport {\n  loadConfig,\n  createMatchPath,\n  MatchPath,\n  ConfigLoaderSuccessResult,\n} from 'tsconfig-paths';\n\nexport interface nxViteTsPathsOptions {\n  /**\n   * Enable debug logging\n   * @default false\n   **/\n  debug?: boolean;\n  /**\n   * export fields in package.json to use for resolving\n   * @default [['exports', '.', 'import'], 'module', 'main']\n   *\n   * fallback resolution will use ['main', 'module']\n   **/\n  mainFields?: (string | string[])[];\n  /**\n   * extensions to check when resolving files when package.json resolution fails\n   * @default ['.ts', '.tsx', '.js', '.jsx', '.json', '.mjs', '.cjs']\n   **/\n  extensions?: string[];\n}\n\nexport function nxViteTsPaths(options: nxViteTsPathsOptions = {}) {\n  let matchTsPathEsm: MatchPath;\n  let matchTsPathFallback: MatchPath | undefined;\n  let tsConfigPathsEsm: ConfigLoaderSuccessResult;\n  let tsConfigPathsFallback: ConfigLoaderSuccessResult;\n\n  options.extensions ??= [\n    '.ts',\n    '.tsx',\n    '.js',\n    '.jsx',\n    '.json',\n    '.mjs',\n    '.cjs',\n  ];\n  options.mainFields ??= [['exports', '.', 'import'], 'module', 'main'];\n\n  return {\n    name: 'nx-vite-ts-paths',\n    configResolved(config: any) {\n      const projectRoot = config.root;\n      const projectRootFromWorkspaceRoot = relative(workspaceRoot, projectRoot);\n\n      const foundTsConfigPath = getTsConfig(\n        join(\n          workspaceRoot,\n          'tmp',\n          projectRootFromWorkspaceRoot,\n          'tsconfig.generated.json'\n        )\n      );\n      if (!foundTsConfigPath) {\n        throw new Error(stripIndents`Unable to find a tsconfig in the workspace! \nThere should at least be a tsconfig.base.json or tsconfig.json in the root of the workspace ${workspaceRoot}`);\n      }\n      const parsed = loadConfig(foundTsConfigPath);\n\n      logIt('first parsed tsconfig: ', parsed);\n      if (parsed.resultType === 'failed') {\n        throw new Error(`Failed loading tsonfig at ${foundTsConfigPath}`);\n      }\n      tsConfigPathsEsm = parsed;\n\n      matchTsPathEsm = createMatchPath(\n        parsed.absoluteBaseUrl,\n        parsed.paths,\n        options.mainFields\n      );\n\n      const rootLevelTsConfig = getTsConfig(\n        join(workspaceRoot, 'tsconfig.base.json')\n      );\n      const rootLevelParsed = loadConfig(rootLevelTsConfig);\n      logIt('fallback parsed tsconfig: ', rootLevelParsed);\n      if (rootLevelParsed.resultType === 'success') {\n        tsConfigPathsFallback = rootLevelParsed;\n        matchTsPathFallback = createMatchPath(\n          rootLevelParsed.absoluteBaseUrl,\n          rootLevelParsed.paths,\n          ['main', 'module']\n        );\n      }\n    },\n    resolveId(importPath: string) {\n      let resolvedFile: string;\n      try {\n        resolvedFile = matchTsPathEsm(importPath);\n      } catch (e) {\n        logIt('Using fallback path matching.');\n        resolvedFile = matchTsPathFallback?.(importPath);\n      }\n\n      if (!resolvedFile) {\n        if (tsConfigPathsEsm || tsConfigPathsFallback) {\n          logIt(\n            `Unable to resolve ${importPath} with tsconfig paths. Using fallback file matching.`\n          );\n          resolvedFile =\n            loadFileFromPaths(tsConfigPathsEsm, importPath) ||\n            loadFileFromPaths(tsConfigPathsFallback, importPath);\n        } else {\n          logIt(`Unable to resolve ${importPath} with tsconfig paths`);\n        }\n      }\n\n      logIt(`Resolved ${importPath} to ${resolvedFile}`);\n      // Returning null defers to other resolveId functions and eventually the default resolution behavior\n      // https://rollupjs.org/plugin-development/#resolveid\n      return resolvedFile || null;\n    },\n  };\n\n  function getTsConfig(preferredTsConfigPath: string): string {\n    return [\n      resolve(preferredTsConfigPath),\n      resolve(join(workspaceRoot, 'tsconfig.base.json')),\n      resolve(join(workspaceRoot, 'tsconfig.json')),\n    ].find((tsPath) => {\n      if (existsSync(tsPath)) {\n        logIt('Found tsconfig at', tsPath);\n        return tsPath;\n      }\n    });\n  }\n\n  function logIt(...msg: any[]) {\n    if (process.env.NX_VERBOSE_LOGGING === 'true' || options?.debug) {\n      console.debug('\\n[Nx Vite TsPaths]', ...msg);\n    }\n  }\n\n  function loadFileFromPaths(\n    tsconfig: ConfigLoaderSuccessResult,\n    importPath: string\n  ) {\n    logIt(\n      `Trying to resolve file from config in ${tsconfig.configFileAbsolutePath}`\n    );\n    let resolvedFile: string;\n    for (const alias in tsconfig.paths) {\n      const paths = tsconfig.paths[alias];\n\n      const normalizedImport = alias.replace(/\\/\\*$/, '');\n\n      if (importPath.startsWith(normalizedImport)) {\n        const path = (tsconfig.absoluteBaseUrl, paths[0].replace(/\\/\\*$/, ''));\n        resolvedFile = findFile(importPath.replace(normalizedImport, path));\n      }\n    }\n\n    return resolvedFile;\n  }\n\n  function findFile(path: string): string {\n    for (const ext of options.extensions) {\n      const r = resolve(path + ext);\n      if (existsSync(r)) {\n        return r;\n      }\n    }\n  }\n}\n"],"names":["nxViteTsPaths","options","matchTsPathEsm","matchTsPathFallback","tsConfigPathsEsm","tsConfigPathsFallback","extensions","mainFields","name","configResolved","config","projectRoot","root","projectRootFromWorkspaceRoot","relative","workspaceRoot","foundTsConfigPath","getTsConfig","join","Error","stripIndents","parsed","loadConfig","logIt","resultType","createMatchPath","absoluteBaseUrl","paths","rootLevelTsConfig","rootLevelParsed","resolveId","importPath","resolvedFile","e","loadFileFromPaths","preferredTsConfigPath","resolve","find","tsPath","existsSync","msg","process","env","NX_VERBOSE_LOGGING","debug","console","tsconfig","configFileAbsolutePath","alias","normalizedImport","replace","startsWith","path","findFile","ext","r"],"mappings":"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"}