{"version":3,"sources":["../../../../../../packages/vite/src/executors/test/vitest.impl.ts"],"sourcesContent":["import {\n  ExecutorContext,\n  joinPathFragments,\n  logger,\n  readJsonFile,\n  stripIndents,\n  workspaceRoot,\n} from '@nx/devkit';\nimport { CoverageOptions, File, Reporter } from 'vitest';\nimport { loadConfigFromFile } from 'vite';\nimport { VitestExecutorOptions } from './schema';\nimport { join, relative, resolve } from 'path';\nimport { existsSync } from 'fs';\nimport { registerTsConfigPaths } from '@nx/js/src/internal';\n\nclass NxReporter implements Reporter {\n  deferred: {\n    promise: Promise<boolean>;\n    resolve: (val: boolean) => void;\n  };\n\n  constructor(private watch: boolean) {\n    this.setupDeferred();\n  }\n\n  async *[Symbol.asyncIterator]() {\n    do {\n      const hasErrors = await this.deferred.promise;\n      yield { hasErrors };\n      this.setupDeferred();\n    } while (this.watch);\n  }\n\n  private setupDeferred() {\n    let resolve: (val: boolean) => void;\n    this.deferred = {\n      promise: new Promise((res) => {\n        resolve = res;\n      }),\n      resolve,\n    };\n  }\n\n  onFinished(files: File[], errors?: unknown[]) {\n    const hasErrors =\n      files.some((f) => f.result?.state === 'fail') || errors?.length > 0;\n    this.deferred.resolve(hasErrors);\n  }\n}\n\nexport async function* vitestExecutor(\n  options: VitestExecutorOptions,\n  context: ExecutorContext\n) {\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;\n  registerTsConfigPaths(resolve(workspaceRoot, projectRoot, 'tsconfig.json'));\n\n  const { startVitest } = await (Function(\n    'return import(\"vitest/node\")'\n  )() as Promise<typeof import('vitest/node')>);\n\n  const nxReporter = new NxReporter(options.watch);\n  const settings = await getSettings(options, context, projectRoot);\n  settings.reporters.push(nxReporter);\n  const cliFilters = options.testFiles ?? [];\n\n  const ctx = await startVitest(options.mode, cliFilters, settings);\n\n  let hasErrors = false;\n\n  const processExit = () => {\n    ctx.exit();\n    if (hasErrors) {\n      process.exit(1);\n    } else {\n      process.exit(0);\n    }\n  };\n\n  if (options.watch) {\n    process.on('SIGINT', processExit);\n    process.on('SIGTERM', processExit);\n    process.on('exit', processExit);\n  }\n\n  for await (const report of nxReporter) {\n    // vitest sets the exitCode = 1 when code coverage isn't met\n    hasErrors =\n      report.hasErrors || (process.exitCode && process.exitCode !== 0);\n  }\n\n  return {\n    success: !hasErrors,\n  };\n}\n\nasync function getSettings(\n  options: VitestExecutorOptions,\n  context: ExecutorContext,\n  projectRoot: string\n) {\n  const packageJsonPath = join(workspaceRoot, 'package.json');\n  const packageJson = existsSync(packageJsonPath)\n    ? readJsonFile(packageJsonPath)\n    : undefined;\n  let provider: 'v8' | 'c8' = 'v8';\n  if (\n    packageJson?.dependencies?.['@vitest/coverage-c8'] ||\n    packageJson?.devDependencies?.['@vitest/coverage-c8']\n  ) {\n    provider = 'c8';\n  }\n  const offset = relative(workspaceRoot, context.cwd);\n  // if reportsDirectory is not provided vitest will remove all files in the project root\n  // when coverage is enabled in the vite.config.ts\n  const coverage: CoverageOptions = options.reportsDirectory\n    ? {\n        enabled: options.coverage,\n        reportsDirectory: options.reportsDirectory,\n        provider,\n      }\n    : ({} as CoverageOptions);\n\n  const viteConfigPath = options.config\n    ? options.config // config is expected to be from the workspace root\n    : findViteConfig(joinPathFragments(context.root, projectRoot));\n\n  const resolvedProjectRoot = resolve(workspaceRoot, projectRoot);\n  const resolvedViteConfigPath = resolve(\n    workspaceRoot,\n    projectRoot,\n    relative(resolvedProjectRoot, viteConfigPath)\n  );\n\n  const resolved = await loadConfigFromFile(\n    {\n      mode: options.mode,\n      command: 'serve',\n    },\n    resolvedViteConfigPath,\n    resolvedProjectRoot\n  );\n\n  if (!viteConfigPath || !resolved?.config?.['test']) {\n    logger.warn(stripIndents`Unable to load test config from config file ${\n      resolved?.path ?? viteConfigPath\n    }\nSome settings may not be applied as expected.\nYou can manually set the config in the project, ${\n      context.projectName\n    }, configuration.\n      `);\n  }\n\n  const settings = {\n    ...options,\n    // when running nx from the project root, the root will get appended to the cwd.\n    // creating an invalid path and no tests will be found.\n    // instead if we are not at the root, let the cwd be root.\n    root: offset === '' ? resolvedProjectRoot : workspaceRoot,\n    config: resolvedViteConfigPath,\n    reporters: [\n      ...(options.reporters ?? []),\n      ...((resolved?.config?.['test']?.reporters as string[]) ?? []),\n      'default',\n    ] as (string | Reporter)[],\n    coverage: { ...coverage, ...resolved?.config?.['test']?.coverage },\n  };\n\n  return settings;\n}\n\nfunction findViteConfig(projectRootFullPath: string): string {\n  const allowsExt = ['js', 'mjs', 'ts', 'cjs', 'mts', 'cts'];\n\n  for (const ext of allowsExt) {\n    if (\n      existsSync(joinPathFragments(projectRootFullPath, `vite.config.${ext}`))\n    ) {\n      return joinPathFragments(projectRootFullPath, `vite.config.${ext}`);\n    }\n  }\n}\n\nexport default vitestExecutor;\n"],"names":["vitestExecutor","NxReporter","Symbol","asyncIterator","hasErrors","deferred","promise","setupDeferred","watch","resolve","Promise","res","onFinished","files","errors","some","f","result","state","length","constructor","options","context","projectRoot","projectsConfigurations","projects","projectName","root","registerTsConfigPaths","workspaceRoot","startVitest","Function","nxReporter","settings","getSettings","reporters","push","cliFilters","testFiles","ctx","mode","processExit","exit","process","on","report","exitCode","success","packageJson","resolved","packageJsonPath","join","existsSync","readJsonFile","undefined","provider","dependencies","devDependencies","offset","relative","cwd","coverage","reportsDirectory","enabled","viteConfigPath","config","findViteConfig","joinPathFragments","resolvedProjectRoot","resolvedViteConfigPath","loadConfigFromFile","command","logger","warn","stripIndents","path","projectRootFullPath","allowsExt","ext"],"mappings":"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"}