{"version":3,"sources":["../../../../../../packages/vite/src/executors/preview-server/preview-server.impl.ts"],"sourcesContent":["import { ExecutorContext, parseTargetString, runExecutor } from '@nx/devkit';\nimport { InlineConfig, mergeConfig, preview, PreviewServer } from 'vite';\nimport {\n  getNxTargetOptions,\n  getViteSharedConfig,\n  getViteBuildOptions,\n  getVitePreviewOptions,\n} from '../../utils/options-utils';\nimport { ViteBuildExecutorOptions } from '../build/schema';\nimport { VitePreviewServerExecutorOptions } from './schema';\n\ninterface CustomBuildTargetOptions {\n  outputPath: string;\n}\n\nexport async function* vitePreviewServerExecutor(\n  options: VitePreviewServerExecutorOptions,\n  context: ExecutorContext\n) {\n  const target = parseTargetString(options.buildTarget, context);\n  const targetConfiguration =\n    context.projectsConfigurations.projects[target.project]?.targets[\n      target.target\n    ];\n  if (!targetConfiguration) {\n    throw new Error(`Invalid buildTarget: ${options.buildTarget}`);\n  }\n\n  const isCustomBuildTarget =\n    targetConfiguration.executor !== '@nx/vite:build' &&\n    targetConfiguration.executor !== '@nrwl/vite:build';\n\n  // Retrieve the option for the configured buildTarget.\n  const buildTargetOptions:\n    | ViteBuildExecutorOptions\n    | CustomBuildTargetOptions = getNxTargetOptions(\n    options.buildTarget,\n    context\n  );\n\n  const outputPath = options.staticFilePath ?? buildTargetOptions.outputPath;\n\n  if (!outputPath) {\n    throw new Error(\n      `Could not infer the \"outputPath\". It should either be a property of the \"${options.buildTarget}\" buildTarget or provided explicitly as a \"staticFilePath\" option.`\n    );\n  }\n\n  // Merge the options from the build and preview-serve targets.\n  // The latter takes precedence.\n  const mergedOptions = {\n    ...{ watch: {} },\n    ...(isCustomBuildTarget ? {} : buildTargetOptions),\n    ...options,\n    outputPath,\n  };\n\n  // Retrieve the server configuration.\n  const serverConfig: InlineConfig = mergeConfig(\n    getViteSharedConfig(mergedOptions, options.clearScreen, context),\n    {\n      build: getViteBuildOptions(mergedOptions, context),\n      preview: getVitePreviewOptions(mergedOptions, context),\n    }\n  );\n\n  if (serverConfig.mode === 'production') {\n    console.warn('WARNING: preview is not meant to be run in production!');\n  }\n\n  let server: PreviewServer | undefined;\n\n  const processOnExit = async () => {\n    await closeServer(server);\n  };\n\n  process.once('SIGINT', processOnExit);\n  process.once('SIGTERM', processOnExit);\n  process.once('exit', processOnExit);\n\n  // Launch the build target.\n  // If customBuildTarget is set to true, do not provide any overrides to it\n  const buildTargetOverrides = isCustomBuildTarget ? {} : mergedOptions;\n  const build = await runExecutor(target, buildTargetOverrides, context);\n\n  for await (const result of build) {\n    if (result.success) {\n      try {\n        if (!server) {\n          server = await preview(serverConfig);\n        }\n        server.printUrls();\n\n        const resolvedUrls = [\n          ...server.resolvedUrls.local,\n          ...server.resolvedUrls.network,\n        ];\n\n        yield {\n          success: true,\n          baseUrl: resolvedUrls[0] ?? '',\n        };\n      } catch (e) {\n        console.error(e);\n        yield {\n          success: false,\n          baseUrl: '',\n        };\n      }\n    } else {\n      yield {\n        success: false,\n        baseUrl: '',\n      };\n    }\n  }\n\n  await new Promise<void>((resolve) => {\n    process.once('SIGINT', () => resolve());\n    process.once('SIGTERM', () => resolve());\n    process.once('exit', () => resolve());\n  });\n}\n\nfunction closeServer(server?: PreviewServer): Promise<void> {\n  return new Promise((resolve) => {\n    if (!server) {\n      resolve();\n    } else {\n      const { httpServer } = server;\n      // closeAllConnections was added in Node v18.2.0\n      httpServer.closeAllConnections && httpServer.closeAllConnections();\n      httpServer.close(() => resolve());\n    }\n  });\n}\n\nexport default vitePreviewServerExecutor;\n"],"names":["vitePreviewServerExecutor","options","context","target","parseTargetString","buildTarget","targetConfiguration","projectsConfigurations","projects","project","targets","Error","isCustomBuildTarget","executor","buildTargetOptions","getNxTargetOptions","outputPath","staticFilePath","mergedOptions","watch","serverConfig","mergeConfig","getViteSharedConfig","clearScreen","build","getViteBuildOptions","preview","getVitePreviewOptions","mode","console","warn","server","processOnExit","closeServer","process","once","buildTargetOverrides","runExecutor","result","success","printUrls","resolvedUrls","local","network","baseUrl","e","error","Promise","resolve","httpServer","closeAllConnections","close"],"mappings":"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"}