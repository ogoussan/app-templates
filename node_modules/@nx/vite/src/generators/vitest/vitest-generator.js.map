{"version":3,"sources":["../../../../../../packages/vite/src/generators/vitest/vitest-generator.ts"],"sourcesContent":["import {\n  addDependenciesToPackageJson,\n  convertNxGenerator,\n  formatFiles,\n  generateFiles,\n  GeneratorCallback,\n  joinPathFragments,\n  offsetFromRoot,\n  readProjectConfiguration,\n  runTasksInSerial,\n  Tree,\n  updateJson,\n} from '@nx/devkit';\nimport {\n  addOrChangeTestTarget,\n  createOrEditViteConfig,\n  findExistingTargetsInProject,\n} from '../../utils/generator-utils';\nimport { VitestGeneratorSchema } from './schema';\n\nimport initGenerator from '../init/init';\nimport {\n  vitestCoverageC8Version,\n  vitestCoverageIstanbulVersion,\n  vitestCoverageV8Version,\n} from '../../utils/versions';\n\nimport { addTsLibDependencies } from '@nx/js';\nimport { join } from 'path';\n\nexport async function vitestGenerator(\n  tree: Tree,\n  schema: VitestGeneratorSchema\n) {\n  const tasks: GeneratorCallback[] = [];\n\n  const { targets, root, projectType } = readProjectConfiguration(\n    tree,\n    schema.project\n  );\n  let testTarget =\n    schema.testTarget ??\n    findExistingTargetsInProject(targets).validFoundTargetName.test ??\n    'test';\n\n  addOrChangeTestTarget(tree, schema, testTarget);\n\n  const initTask = await initGenerator(tree, {\n    uiFramework: schema.uiFramework,\n    testEnvironment: schema.testEnvironment,\n  });\n  tasks.push(initTask);\n\n  if (!schema.skipViteConfig) {\n    if (schema.uiFramework === 'react') {\n      createOrEditViteConfig(\n        tree,\n        {\n          project: schema.project,\n          includeLib: projectType === 'library',\n          includeVitest: true,\n          inSourceTests: schema.inSourceTests,\n          rollupOptionsExternal: [\n            `'react'`,\n            `'react-dom'`,\n            `'react/jsx-runtime'`,\n          ],\n          rollupOptionsExternalString: `\"'react', 'react-dom', 'react/jsx-runtime'\"`,\n          imports: [`import react from '@vitejs/plugin-react'`],\n          plugins: ['react()'],\n        },\n        true\n      );\n    } else {\n      createOrEditViteConfig(\n        tree,\n        {\n          ...schema,\n          includeVitest: true,\n          includeLib: projectType === 'library',\n        },\n        true\n      );\n    }\n  }\n\n  createFiles(tree, schema, root);\n  updateTsConfig(tree, schema, root);\n\n  const coverageProviderDependency = getCoverageProviderDependency(\n    schema.coverageProvider\n  );\n\n  const installCoverageProviderTask = addDependenciesToPackageJson(\n    tree,\n    {},\n    coverageProviderDependency\n  );\n  tasks.push(installCoverageProviderTask);\n\n  if (!schema.skipFormat) {\n    await formatFiles(tree);\n  }\n\n  return runTasksInSerial(...tasks);\n}\n\nfunction updateTsConfig(\n  tree: Tree,\n  options: VitestGeneratorSchema,\n  projectRoot: string\n) {\n  if (tree.exists(joinPathFragments(projectRoot, 'tsconfig.spec.json'))) {\n    updateJson(\n      tree,\n      joinPathFragments(projectRoot, 'tsconfig.spec.json'),\n      (json) => {\n        if (!json.compilerOptions?.types?.includes('vitest')) {\n          if (json.compilerOptions?.types) {\n            json.compilerOptions.types.push('vitest');\n          } else {\n            json.compilerOptions ??= {};\n            json.compilerOptions.types = ['vitest'];\n          }\n        }\n        return json;\n      }\n    );\n\n    updateJson(\n      tree,\n      joinPathFragments(projectRoot, 'tsconfig.json'),\n      (json) => {\n        if (\n          json.references &&\n          !json.references.some((r) => r.path === './tsconfig.spec.json')\n        ) {\n          json.references.push({\n            path: './tsconfig.spec.json',\n          });\n        }\n        return json;\n      }\n    );\n  } else {\n    updateJson(\n      tree,\n      joinPathFragments(projectRoot, 'tsconfig.json'),\n      (json) => {\n        if (!json.compilerOptions?.types?.includes('vitest')) {\n          if (json.compilerOptions?.types) {\n            json.compilerOptions.types.push('vitest');\n          } else {\n            json.compilerOptions ??= {};\n            json.compilerOptions.types = ['vitest'];\n          }\n        }\n        return json;\n      }\n    );\n  }\n\n  if (options.inSourceTests) {\n    const tsconfigLibPath = joinPathFragments(projectRoot, 'tsconfig.lib.json');\n    const tsconfigAppPath = joinPathFragments(projectRoot, 'tsconfig.app.json');\n    if (tree.exists(tsconfigLibPath)) {\n      updateJson(\n        tree,\n        joinPathFragments(projectRoot, 'tsconfig.lib.json'),\n        (json) => {\n          (json.compilerOptions.types ??= []).push('vitest/importMeta');\n          return json;\n        }\n      );\n    } else if (tree.exists(tsconfigAppPath)) {\n      updateJson(\n        tree,\n        joinPathFragments(projectRoot, 'tsconfig.app.json'),\n        (json) => {\n          (json.compilerOptions.types ??= []).push('vitest/importMeta');\n          return json;\n        }\n      );\n    }\n\n    addTsLibDependencies(tree);\n  }\n}\n\nfunction createFiles(\n  tree: Tree,\n  options: VitestGeneratorSchema,\n  projectRoot: string\n) {\n  generateFiles(tree, join(__dirname, 'files'), projectRoot, {\n    tmpl: '',\n    ...options,\n    projectRoot,\n    offsetFromRoot: offsetFromRoot(projectRoot),\n  });\n}\n\nfunction getCoverageProviderDependency(\n  coverageProvider: VitestGeneratorSchema['coverageProvider']\n) {\n  switch (coverageProvider) {\n    case 'c8':\n      return {\n        '@vitest/coverage-c8': vitestCoverageC8Version,\n      };\n    case 'istanbul':\n      return {\n        '@vitest/coverage-istanbul': vitestCoverageIstanbulVersion,\n      };\n    default:\n      return {\n        '@vitest/coverage-v8': vitestCoverageV8Version,\n      };\n  }\n}\n\nexport default vitestGenerator;\nexport const vitestSchematic = convertNxGenerator(vitestGenerator);\n"],"names":["vitestGenerator","vitestSchematic","tree","schema","tasks","targets","root","projectType","readProjectConfiguration","project","testTarget","findExistingTargetsInProject","validFoundTargetName","test","addOrChangeTestTarget","initTask","initGenerator","uiFramework","testEnvironment","push","skipViteConfig","createOrEditViteConfig","includeLib","includeVitest","inSourceTests","rollupOptionsExternal","rollupOptionsExternalString","imports","plugins","createFiles","updateTsConfig","coverageProviderDependency","getCoverageProviderDependency","coverageProvider","installCoverageProviderTask","addDependenciesToPackageJson","skipFormat","formatFiles","runTasksInSerial","options","projectRoot","exists","joinPathFragments","updateJson","json","compilerOptions","types","includes","references","some","r","path","tsconfigLibPath","tsconfigAppPath","addTsLibDependencies","generateFiles","join","__dirname","tmpl","offsetFromRoot","vitestCoverageC8Version","vitestCoverageIstanbulVersion","vitestCoverageV8Version","convertNxGenerator"],"mappings":"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"}