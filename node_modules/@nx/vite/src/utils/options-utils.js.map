{"version":3,"sources":["../../../../../packages/vite/src/utils/options-utils.ts"],"sourcesContent":["import {\n  ExecutorContext,\n  joinPathFragments,\n  logger,\n  parseTargetString,\n  readTargetOptions,\n} from '@nx/devkit';\nimport { existsSync } from 'fs';\nimport { relative } from 'path';\nimport {\n  BuildOptions,\n  InlineConfig,\n  PluginOption,\n  PreviewOptions,\n  searchForWorkspaceRoot,\n  ServerOptions,\n} from 'vite';\nimport { ViteDevServerExecutorOptions } from '../executors/dev-server/schema';\nimport { VitePreviewServerExecutorOptions } from '../executors/preview-server/schema';\nimport replaceFiles from '../../plugins/rollup-replace-files.plugin';\nimport { ViteBuildExecutorOptions } from '../executors/build/schema';\n\n/**\n * Returns the path to the vite config file or undefined when not found.\n */\nexport function normalizeViteConfigFilePath(\n  projectRoot: string,\n  configFile?: string\n): string | undefined {\n  if (configFile) {\n    const normalized = joinPathFragments(configFile);\n    if (!existsSync(normalized)) {\n      throw new Error(\n        `Could not find vite config at provided path \"${normalized}\".`\n      );\n    }\n    return normalized;\n  }\n  return existsSync(joinPathFragments(projectRoot, 'vite.config.ts'))\n    ? joinPathFragments(projectRoot, 'vite.config.ts')\n    : existsSync(joinPathFragments(projectRoot, 'vite.config.js'))\n    ? joinPathFragments(projectRoot, 'vite.config.js')\n    : undefined;\n}\n\nexport function getProjectTsConfigPath(\n  projectRoot: string\n): string | undefined {\n  return existsSync(joinPathFragments(projectRoot, 'tsconfig.app.json'))\n    ? joinPathFragments(projectRoot, 'tsconfig.app.json')\n    : existsSync(joinPathFragments(projectRoot, 'tsconfig.lib.json'))\n    ? joinPathFragments(projectRoot, 'tsconfig.lib.json')\n    : existsSync(joinPathFragments(projectRoot, 'tsconfig.json'))\n    ? joinPathFragments(projectRoot, 'tsconfig.json')\n    : undefined;\n}\n\n/**\n * Returns the path to the proxy configuration file or undefined when not found.\n */\nexport function getViteServerProxyConfigPath(\n  nxProxyConfig: string | undefined,\n  context: ExecutorContext\n): string | undefined {\n  if (nxProxyConfig) {\n    const projectRoot =\n      context.projectsConfigurations.projects[context.projectName].root;\n\n    const proxyConfigPath = nxProxyConfig\n      ? joinPathFragments(context.root, nxProxyConfig)\n      : joinPathFragments(projectRoot, 'proxy.conf.json');\n\n    if (existsSync(proxyConfigPath)) {\n      return proxyConfigPath;\n    }\n  }\n}\n\n/**\n * Builds the shared options for vite.\n *\n * Most shared options are derived from the build target.\n */\nexport function getViteSharedConfig(\n  options: ViteBuildExecutorOptions,\n  clearScreen: boolean | undefined,\n  context: ExecutorContext\n): InlineConfig {\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;\n\n  const root =\n    projectRoot === '.'\n      ? process.cwd()\n      : relative(context.cwd, joinPathFragments(context.root, projectRoot));\n\n  return {\n    mode: options.mode,\n    root,\n    base: options.base,\n    configFile: normalizeViteConfigFilePath(projectRoot, options.configFile),\n    plugins: [replaceFiles(options.fileReplacements) as PluginOption],\n    optimizeDeps: { force: options.force },\n    clearScreen: clearScreen,\n    logLevel: options.logLevel,\n  };\n}\n\n/**\n * Builds the options for the vite dev server.\n */\nexport function getViteServerOptions(\n  options: ViteDevServerExecutorOptions,\n  context: ExecutorContext\n): ServerOptions {\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;\n  const serverOptions: ServerOptions = {\n    host: options.host,\n    port: options.port,\n    https: options.https,\n    hmr: options.hmr,\n    open: options.open,\n    cors: options.cors,\n    fs: {\n      allow: [\n        searchForWorkspaceRoot(joinPathFragments(projectRoot)),\n        joinPathFragments(context.root, 'node_modules/vite'),\n      ],\n    },\n  };\n\n  const proxyConfigPath = getViteServerProxyConfigPath(\n    options.proxyConfig,\n    context\n  );\n  if (proxyConfigPath) {\n    logger.info(`Loading proxy configuration from: ${proxyConfigPath}`);\n    serverOptions.proxy = require(proxyConfigPath);\n  }\n\n  return serverOptions;\n}\n\n/**\n * Builds the build options for the vite.\n */\nexport function getViteBuildOptions(\n  options: ViteBuildExecutorOptions,\n  context: ExecutorContext\n): BuildOptions {\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;\n\n  return {\n    outDir: relative(projectRoot, options.outputPath),\n    emptyOutDir: options.emptyOutDir,\n    reportCompressedSize: true,\n    cssCodeSplit: options.cssCodeSplit,\n    target: options.target,\n    commonjsOptions: {\n      transformMixedEsModules: true,\n    },\n    sourcemap: options.sourcemap,\n    minify: options.minify,\n    manifest: options.manifest,\n    ssrManifest: options.ssrManifest,\n    ssr: options.ssr,\n    watch: options.watch as BuildOptions['watch'],\n  };\n}\n\n/**\n * Builds the options for the vite preview server.\n */\nexport function getVitePreviewOptions(\n  options: VitePreviewServerExecutorOptions,\n  context: ExecutorContext\n): PreviewOptions {\n  const serverOptions: ServerOptions = {\n    host: options.host,\n    port: options.port,\n    https: options.https,\n    open: options.open,\n  };\n\n  const proxyConfigPath = getViteServerProxyConfigPath(\n    options.proxyConfig,\n    context\n  );\n  if (proxyConfigPath) {\n    logger.info(`Loading proxy configuration from: ${proxyConfigPath}`);\n    serverOptions.proxy = require(proxyConfigPath);\n  }\n\n  return serverOptions;\n}\n\nexport function getNxTargetOptions(target: string, context: ExecutorContext) {\n  const targetObj = parseTargetString(target, context);\n  return readTargetOptions(targetObj, context);\n}\n"],"names":["normalizeViteConfigFilePath","getProjectTsConfigPath","getViteServerProxyConfigPath","getViteSharedConfig","getViteServerOptions","getViteBuildOptions","getVitePreviewOptions","getNxTargetOptions","projectRoot","configFile","normalized","joinPathFragments","existsSync","Error","undefined","nxProxyConfig","context","projectsConfigurations","projects","projectName","root","proxyConfigPath","options","clearScreen","process","cwd","relative","mode","base","plugins","replaceFiles","fileReplacements","optimizeDeps","force","logLevel","serverOptions","host","port","https","hmr","open","cors","fs","allow","searchForWorkspaceRoot","proxyConfig","logger","info","proxy","require","outDir","outputPath","emptyOutDir","reportCompressedSize","cssCodeSplit","target","commonjsOptions","transformMixedEsModules","sourcemap","minify","manifest","ssrManifest","ssr","watch","targetObj","parseTargetString","readTargetOptions"],"mappings":"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"}