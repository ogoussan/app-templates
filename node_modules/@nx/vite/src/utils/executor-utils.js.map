{"version":3,"sources":["../../../../../packages/vite/src/utils/executor-utils.ts"],"sourcesContent":["import { printDiagnostics, runTypeCheck } from '@nx/js';\nimport { join, resolve } from 'path';\nimport { ViteBuildExecutorOptions } from '../executors/build/schema';\nimport { ExecutorContext } from '@nx/devkit';\nimport { ViteDevServerExecutorOptions } from '../executors/dev-server/schema';\nimport {\n  calculateProjectBuildableDependencies,\n  createTmpTsConfig,\n} from '@nx/js/src/utils/buildable-libs-utils';\n\nexport async function validateTypes(opts: {\n  workspaceRoot: string;\n  projectRoot: string;\n  tsconfig: string;\n}): Promise<void> {\n  const result = await runTypeCheck({\n    workspaceRoot: opts.workspaceRoot,\n    tsConfigPath: join(opts.workspaceRoot, opts.tsconfig),\n    mode: 'noEmit',\n  });\n\n  await printDiagnostics(result.errors, result.warnings);\n\n  if (result.errors.length > 0) {\n    throw new Error('Found type errors. See above.');\n  }\n}\n\nexport function createBuildableTsConfig(\n  projectRoot: string,\n  options: ViteBuildExecutorOptions | ViteDevServerExecutorOptions,\n  context: ExecutorContext\n) {\n  const tsConfig = resolve(projectRoot, 'tsconfig.json');\n  options.buildLibsFromSource ??= true;\n\n  if (!options.buildLibsFromSource) {\n    const { dependencies } = calculateProjectBuildableDependencies(\n      context.taskGraph,\n      context.projectGraph,\n      context.root,\n      context.projectName,\n      // When using incremental building and the serve target is called\n      // we need to get the deps for the 'build' target instead.\n      context.targetName === 'serve' ? 'build' : context.targetName,\n      context.configurationName\n    );\n    // this tsconfig is used via the vite ts paths plugin\n    createTmpTsConfig(tsConfig, context.root, projectRoot, dependencies);\n  }\n}\n"],"names":["validateTypes","createBuildableTsConfig","opts","result","runTypeCheck","workspaceRoot","tsConfigPath","join","tsconfig","mode","printDiagnostics","errors","warnings","length","Error","projectRoot","options","context","tsConfig","resolve","buildLibsFromSource","dependencies","calculateProjectBuildableDependencies","taskGraph","projectGraph","root","projectName","targetName","configurationName","createTmpTsConfig"],"mappings":";;;;;;;;IAUsBA,aAAa;eAAbA;;IAkBNC,uBAAuB;eAAvBA;;;oBA5B+B;sBACjB;oCAOvB;AAEA,eAAeD,cAAcE,IAInC;IACC,MAAMC,SAAS,MAAMC,IAAAA,gBAAY,EAAC;QAChCC,eAAeH,KAAKG,aAAa;QACjCC,cAAcC,IAAAA,UAAI,EAACL,KAAKG,aAAa,EAAEH,KAAKM,QAAQ;QACpDC,MAAM;IACR;IAEA,MAAMC,IAAAA,oBAAgB,EAACP,OAAOQ,MAAM,EAAER,OAAOS,QAAQ;IAErD,IAAIT,OAAOQ,MAAM,CAACE,MAAM,GAAG,GAAG;QAC5B,MAAM,IAAIC,MAAM;IAClB;AACF;AAEO,SAASb,wBACdc,WAAmB,EACnBC,OAAgE,EAChEC,OAAwB;QAGxBD;IADA,MAAME,WAAWC,IAAAA,aAAO,EAACJ,aAAa;;IACtCC,yBAAAA,WAAAA,SAAQI,sDAARJ,SAAQI,sBAAwB;IAEhC,IAAI,CAACJ,QAAQI,mBAAmB,EAAE;QAChC,MAAM,EAAEC,YAAY,EAAE,GAAGC,IAAAA,yDAAqC,EAC5DL,QAAQM,SAAS,EACjBN,QAAQO,YAAY,EACpBP,QAAQQ,IAAI,EACZR,QAAQS,WAAW,EACnB,iEAAiE;QACjE,0DAA0D;QAC1DT,QAAQU,UAAU,KAAK,UAAU,UAAUV,QAAQU,UAAU,EAC7DV,QAAQW,iBAAiB;QAE3B,qDAAqD;QACrDC,IAAAA,qCAAiB,EAACX,UAAUD,QAAQQ,IAAI,EAAEV,aAAaM;IACzD;AACF"}