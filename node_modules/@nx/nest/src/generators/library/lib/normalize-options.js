"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toJsLibraryGeneratorOptions = exports.normalizeOptions = void 0;
const project_name_and_root_utils_1 = require("@nx/devkit/src/generators/project-name-and-root-utils");
const get_npm_scope_1 = require("@nx/js/src/utils/package-json/get-npm-scope");
const linter_1 = require("@nx/linter");
async function normalizeOptions(tree, options) {
    const { projectName, names: projectNames, projectRoot, importPath, } = await (0, project_name_and_root_utils_1.determineProjectNameAndRootOptions)(tree, {
        name: options.name,
        projectType: 'library',
        directory: options.directory,
        importPath: options.importPath,
        projectNameAndRootFormat: options.projectNameAndRootFormat,
        callingGenerator: '@nx/nest:library',
    });
    const fileName = options.simpleName
        ? projectNames.projectSimpleName
        : projectNames.projectFileName;
    const parsedTags = options.tags
        ? options.tags.split(',').map((s) => s.trim())
        : [];
    const normalized = {
        ...options,
        strict: options.strict ?? true,
        controller: options.controller ?? false,
        fileName,
        global: options.global ?? false,
        linter: options.linter ?? linter_1.Linter.EsLint,
        parsedTags,
        prefix: (0, get_npm_scope_1.getNpmScope)(tree),
        projectName,
        projectRoot,
        importPath,
        service: options.service ?? false,
        target: options.target ?? 'es6',
        testEnvironment: options.testEnvironment ?? 'node',
        unitTestRunner: options.unitTestRunner ?? 'jest',
    };
    return normalized;
}
exports.normalizeOptions = normalizeOptions;
function toJsLibraryGeneratorOptions(options) {
    return {
        name: options.name,
        bundler: options?.buildable ? 'tsc' : 'none',
        directory: options.directory,
        importPath: options.importPath,
        linter: options.linter,
        publishable: options.publishable,
        skipFormat: true,
        skipTsConfig: options.skipTsConfig,
        strict: options.strict,
        tags: options.tags,
        testEnvironment: options.testEnvironment,
        unitTestRunner: options.unitTestRunner,
        config: options.standaloneConfig ? 'project' : 'workspace',
        setParserOptionsProject: options.setParserOptionsProject,
        projectNameAndRootFormat: options.projectNameAndRootFormat,
    };
}
exports.toJsLibraryGeneratorOptions = toJsLibraryGeneratorOptions;
